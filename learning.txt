
Direct Run :

go build -o tmp/main ./cmd/api
./tmp/main

Direct Run without build :  go run ./cmd/api

https://github.com/golang-migrate/migrate/blob/master/cmd/migrate/README.md

**for creating migration**
migrate create -ext sql -dir ./cmd/migrate/migrations -seq create_users_table


for installation Ubuntu/Debian

Step by step:

1 Add the GPG key: 

curl -fsSL https://packagecloud.io/golang-migrate/migrate/gpgkey | sudo gpg --dearmor -o /etc/apt/keyrings/migrate.gpg


2 Add the repository:

echo "deb [signed-by=/etc/apt/keyrings/migrate.gpg] https://packagecloud.io/golang-migrate/migrate/ubuntu/ $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/migrate.list


3 Update package index:

sudo apt-get update


4 Install migrate: 

sudo apt-get install -y migrate


5 Check installation:

migrate -version



After this, the migrate CLI will be available system-wide, so you can run commands like:


migrate create -ext sql -dir ./cmd/migrate/migrations -seq create_users_table
migrate -path ./cmd/migrate/migrations -database sqlite3://data.db up


Then run the command : go run ./cmd/migrate/main.go up



********Air issue ubantu********

Fix in 3 steps

1) go env GOPATH
2) ls $(go env GOPATH)/bin
3) nano ~/.bashrc
4) export PATH=$PATH:$(go env GOPATH)/bin
5) source ~/.bashrc
6) air -v

or directly run :

1) $(go env GOPATH)/bin/air
2) air


********Swagger issue ubantu********

Swagger issue :

go install github.com/swaggo/swag/cmd/swag@latest (at root run command once)

export PATH=$PATH:$(go env GOPATH)/bin
source ~/.bashrc
swag --version
swag init --dir cmd/api --parseDependency --parseInternal --parseDepth 1



*******Authrization********

Just format :

curl -X POST http://localhost:8080/api/v1/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email": "test@example.com", "password": "password"}'


Add event with auth :

curl -X POST http://localhost:8080/api/v1/events -H "Content-Type: application/json" -H "Authorization: Bearer {eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHByIjoxNzU3NjU3MTU4LCJ1c2VySWQiOjF9.8ccYIpkBxFXevM-MCbxzcii0pC_pZvGpXnsG-mtwMTk}" -d '{"name": "Test Event", "ownerId": 1, "description": "This is a test event", "date": "2025-01-01", "location": "Test Location"}' -w "\nHTTP Status: %{http_code}\n"



Login :

curl -X POST http://localhost:8080/api/v1/login -H "Content-Type: application/json" -d '{"email": "test@example.com", "password": "password"}' -w "\nHTTP Status: %{http_code}\n"



Redis : https://redis.io/docs/latest/develop/clients/go/